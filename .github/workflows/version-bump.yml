name: Version Bump

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [main]
    types: [completed]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
      actions: read
      pull-requests: write

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
        clean: true

    - name: Ensure up-to-date main
      run: |
        git fetch origin main
        git checkout main
        git reset --hard origin/main

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Get current version from .csproj
      id: current-version
      run: |
        version=$(grep -o '<Version>.*</Version>' Normaize.API/Normaize.API.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
        if [ -z "$version" ]; then
          version="1.0.0"
        fi
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Find last version bump commit
      id: last-bump
      run: |
        last_bump_commit=$(git log --grep="chore: bump version to" --pretty=format:"%H" -1)
        if [ -z "$last_bump_commit" ]; then
          last_bump_commit=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "last-bump=$last_bump_commit" >> $GITHUB_OUTPUT

    - name: Determine version bump type
      id: bump-type
      run: |
        commit_messages=$(git log --oneline ${{ steps.last-bump.outputs.last-bump }}..HEAD | head -20)
        if echo "$commit_messages" | grep -Ei "breaking|major|!:"; then
          bump_type="major"
        elif echo "$commit_messages" | grep -Ei "feat|feature|new"; then
          bump_type="minor"
        else
          bump_type="patch"
        fi
        echo "bump-type=$bump_type" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: new-version
      run: |
        current_version="${{ steps.current-version.outputs.version }}"
        bump_type="${{ steps.bump-type.outputs.bump-type }}"
        if [[ "$current_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          major=${BASH_REMATCH[1]}
          minor=${BASH_REMATCH[2]}
          patch=${BASH_REMATCH[3]}
        else
          major=1; minor=0; patch=0
        fi
        case "$bump_type" in
          major) major=$((major + 1)); minor=0; patch=0 ;;
          minor) minor=$((minor + 1)); patch=0 ;;
          patch|*) patch=$((patch + 1)) ;;
        esac
        new_version="$major.$minor.$patch"
        echo "new-version=$new_version" >> $GITHUB_OUTPUT

    - name: Update version in project files (.csproj, AssemblyInfo.cs)
      shell: pwsh
      run: |
        $newVersion = "${{ steps.new-version.outputs.new-version }}"
        $csprojFiles = Get-ChildItem -Path . -Filter "*.csproj" -Recurse
        foreach ($file in $csprojFiles) {
          $content = Get-Content $file.FullName -Raw
          $updatedContent = $content -replace '<Version>.*?</Version>', "<Version>$newVersion</Version>"
          Set-Content $file.FullName -Value $updatedContent
        }
        $assemblyInfoFiles = Get-ChildItem -Path . -Filter "AssemblyInfo.cs" -Recurse
        foreach ($file in $assemblyInfoFiles) {
          $content = Get-Content $file.FullName -Raw
          $updatedContent = $content `
            -replace 'AssemblyVersion\(".*?"\)', "AssemblyVersion(`"$newVersion`")" `
            -replace 'AssemblyFileVersion\(".*?"\)', "AssemblyFileVersion(`"$newVersion`")" `
            -replace 'AssemblyInformationalVersion\(".*?"\)', "AssemblyInformationalVersion(`"$newVersion`")"
          Set-Content $file.FullName -Value $updatedContent
        }

    - name: Check for changes after version update
      id: check-changes
      run: |
        git status --porcelain
        git add -A
        if git diff --cached --quiet; then
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          echo "has-changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Skip commit - no changes
      if: steps.check-changes.outputs.has-changes == 'false'
      run: |
        echo "No version changes detected; skipping PR creation."

    - name: Create Pull Request
      if: steps.check-changes.outputs.has-changes == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: bump version to ${{ steps.new-version.outputs.new-version }} [skip ci]"
        base: main
        title: "chore: bump version to ${{ steps.new-version.outputs.new-version }}"
        body: |
          ## Automated Version Bump

          This PR was automatically created after a successful CI/CD pipeline completion.

          ### Changes
          - Updated version from `${{ steps.current-version.outputs.version }}` to `${{ steps.new-version.outputs.new-version }}`
          - Version bump type: **${{ steps.bump-type.outputs.bump-type }}**

          ### Files Changed
          - All `.csproj` and AssemblyInfo files updated with new version

          ### Notes
          - `[skip ci]` in commit message to prevent CI loop
          - Merge to complete the bump; see release workflow for release creation
        labels: automated,version-bump
        assignees: ${{ github.actor }}
        reviewers: ${{ github.actor }}