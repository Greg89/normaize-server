name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    # Skip this job if commit message contains [skip ci]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Run tests
      shell: pwsh
      run: ./scripts/test-env.ps1

    - name: Run tests with coverage
      shell: pwsh
      run: ./scripts/test-env.ps1 --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Download previous coverage history
      uses: actions/download-artifact@v4
      with:
        name: coverage-history
        path: ./coverage-history/
      continue-on-error: true

    - name: Generate coverage report with history
      env:
        REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
      run: |
        # Install ReportGenerator Pro
        dotnet tool install --global dotnet-reportgenerator-globaltool
        
        # Generate HTML report with history if available
        if [ -d "./coverage-history" ] && [ "$(ls -A ./coverage-history)" ]; then
          echo "Generating report with history..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html -historydir:"./coverage-history"
        else
          echo "Generating report without history (first run or no history available)..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html
        fi
        
        # Generate summary and badges
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-summary" -reporttypes:"TextSummary;Badges"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report/
        retention-days: 30

    - name: Upload coverage summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: ./coverage-summary/
        retention-days: 30

    - name: Upload coverage history for next run
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history
        path: ./coverage-report/
        retention-days: 90

    - name: Run security scan
      run: dotnet list package --vulnerable

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t normaize-api .
        echo "Docker image built successfully"
        docker images | grep normaize-api

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        
        # Verify image exists and has correct structure
        echo "Checking image details..."
        docker images normaize-api
        
        # Test that the image contains the expected files
        echo "Validating image contents..."
        docker run --rm --entrypoint="" normaize-api ls -la /app/
        
        # Test that the main application DLL exists
        echo "Testing application files..."
        docker run --rm --entrypoint="" normaize-api test -f /app/Normaize.API.dll && echo "✅ Application DLL found"
        
        echo "✅ Docker image test completed"
        echo "Image builds successfully and contains all required files"

  database-migration:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: normaize
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MySQL Client
      run: sudo apt-get update && sudo apt-get install -y mysql-client

    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        while ! mysql -h 127.0.0.1 -P 3306 -u root -ptest123 -e "SELECT 1" > /dev/null 2>&1; do
          sleep 2
        done
        echo "✅ MySQL is ready"

    - name: Install EF Core Tools
      run: dotnet tool install --global dotnet-ef

    - name: Apply EF Core Migration
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLDATABASE: normaize
        MYSQLUSER: root
        MYSQLPASSWORD: test123
        MYSQLPORT: 3306
      run: |
        dotnet ef database update --project Normaize.Data --startup-project Normaize.API

    - name: Verify Migration
      run: |
        echo "Verifying database migration..."
        
        # Check if tables exist
        mysql -h 127.0.0.1 -P 3306 -u root -ptest123 normaize -e "SHOW TABLES;"
        
        # Check if DataSets table exists and has expected columns
        mysql -h 127.0.0.1 -P 3306 -u root -ptest123 normaize -e "DESCRIBE DataSets;"
        
        echo "✅ Database migration verification completed"

  deploy-coverage-pages:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report/

    - name: Debug repository info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Repository name: ${{ github.event.repository.name }}"
        echo "GitHub server URL: ${{ github.server_url }}"
        echo "Current ref: ${{ github.ref }}"
        echo "Current SHA: ${{ github.sha }}"
        echo "Repository visibility: ${{ github.event.repository.private }}"

    - name: Check repository access
      run: |
        # Test if we can access the repository
        if git ls-remote --exit-code origin > /dev/null 2>&1; then
          echo "✅ Repository access confirmed"
          echo "REPO_ACCESS=true" >> $GITHUB_ENV
        else
          echo "❌ Repository access failed"
          echo "REPO_ACCESS=false" >> $GITHUB_ENV
        fi

    - name: Setup Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./coverage-report/

    - name: Deploy to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Skip deployment - Access issues
      if: env.REPO_ACCESS == 'false'
      run: |
        echo "⚠️ Skipping GitHub Pages deployment due to repository access issues"
        echo "This might be due to repository permissions or configuration"
        echo "Please check your GitHub Pages settings in the repository"
        echo ""
        echo "For private repositories with GitHub Pro:"
        echo "1. Ensure GitHub Pages is enabled in repository settings"
        echo "2. Check that the repository has proper permissions"
        echo "3. Verify that GitHub Pro features are enabled for this repository"

  coverage-summary:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: always()

    steps:
    - name: Download coverage summary
      uses: actions/download-artifact@v4
      with:
        name: coverage-summary
        path: coverage-summary/

    - name: Display coverage summary
      run: |
        if [ -f "coverage-summary/Summary.txt" ]; then
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat coverage-summary/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage summary found"
        fi

    - name: Upload coverage badges
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-badges
        path: coverage-summary/
        retention-days: 30 