name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Run tests with coverage
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run security scan
      run: dotnet list package --vulnerable

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t normaize-api .
        echo "Docker image built successfully"
        docker images | grep normaize-api

    - name: Test Docker image
      run: |
        # Start container with basic environment
        echo "Starting Docker container for testing..."
        docker run --rm -d --name test-container -p 8080:8080 -e ASPNETCORE_ENVIRONMENT=Development normaize-api
        
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15
        
        # Check if container is running
        if ! docker ps | grep -q test-container; then
          echo "Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test basic health endpoint (no database required)
        echo "Testing basic health endpoint..."
        if curl -f http://localhost:8080/health/basic; then
          echo "✅ Basic health check passed!"
        else
          echo "❌ Basic health check failed"
          docker logs test-container
          exit 1
        fi
        
        # Test startup health check
        echo "Testing startup health check..."
        if curl -f http://localhost:8080/health/startup; then
          echo "✅ Startup health check passed!"
        else
          echo "❌ Startup health check failed"
          docker logs test-container
          exit 1
        fi
        
        # Clean up
        docker stop test-container
        echo "✅ Docker image test completed successfully" 