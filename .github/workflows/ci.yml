name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    # Skip this job if commit message contains [skip ci] or is a version-bump branch or is a create-pull-request bot merge
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.ref, 'refs/heads/version-bump/') &&
      !(startsWith(github.event.head_commit.message, 'Merge pull request #') && contains(github.event.head_commit.message, 'from Greg89/create-pull-request/patch'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Begin SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "Starting SonarQube analysis for all projects..."
        echo "Projects to analyze: Normaize.API, Normaize.Core, Normaize.Data"
        echo "Test project: Normaize.Tests"
        
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"Greg89_normaize-server" /o:"greg89" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.exclusions="**/coverage-report/**,**/coverage-summary/**,**/coverage-opencover/**,**/coverage/**,**/test-results/**,**/bin/**,**/obj/**,**/uploads/**,**/*.Designer.cs,**/Migrations/**" /d:sonar.verbose=true

    - name: Build for SonarQube Analysis
      run: |
        echo "Building solution for SonarQube analysis..."
        dotnet build --no-restore --configuration Release
        echo "Build completed. Checking for built assemblies..."
        find . -name "*.dll" -path "*/bin/Release/*" | grep -E "(Normaize\.API|Normaize\.Core|Normaize\.Data)" | head -10

    - name: Debug SonarQube Analysis
      run: |
        echo "=== SonarQube Analysis Debug Information ==="
        echo "Current directory: $(pwd)"
        echo "Solution file exists: $(test -f Normaize.sln && echo 'Yes' || echo 'No')"
        echo "Projects in solution:"
        dotnet sln list
        echo ""
        echo "Built assemblies:"
        find . -name "*.dll" -path "*/bin/Release/*" | grep -E "(Normaize\.API|Normaize\.Core|Normaize\.Data)" | sort
        echo ""
        echo "SonarQube scanner exists: $(test -f ./.sonar/scanner/dotnet-sonarscanner && echo 'Yes' || echo 'No')"
        echo "=== End Debug Information ==="

    - name: Run tests with coverage (develop branch)
      if: github.ref == 'refs/heads/develop'
      shell: pwsh
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --logger trx

    - name: Run tests with coverage (main branch)
      if: github.ref == 'refs/heads/main'
      shell: pwsh
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --logger trx

    - name: Convert coverage to OpenCover format for SonarQube
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
      run: |
        # Install ReportGenerator to convert coverage format
        dotnet tool install --global dotnet-reportgenerator-globaltool
        
        # Convert Cobertura to OpenCover format for SonarQube
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-opencover" -reporttypes:OpenCover
        
        # Copy OpenCover file to expected location
        cp ./coverage-opencover/OpenCover.xml ./coverage/coverage.opencover.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Download previous coverage history
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/download-artifact@v4
      with:
        name: coverage-history-${{ github.ref_name }}
        path: ./coverage-history/
      continue-on-error: true

    - name: Generate coverage report with history
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
      run: |
        # Install ReportGenerator Pro
        dotnet tool install --global dotnet-reportgenerator-globaltool
        
        # Generate HTML report with history if available
        if [ -d "./coverage-history" ] && [ "$(ls -A ./coverage-history)" ]; then
          echo "Generating report with history..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html -historydir:"./coverage-history"
        else
          echo "Generating report without history (first run or no history available)..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html
        fi
        
        # Generate summary and badges
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-summary" -reporttypes:"TextSummary;Badges"

    - name: Debug coverage report directory before upload
      run: |
        echo "Listing contents of ./coverage-report/"
        ls -al ./coverage-report/

    - name: Upload coverage report
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.ref_name }}
        path: ./coverage-report/
        retention-days: 30

    - name: Upload coverage summary
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary-${{ github.ref_name }}
        path: ./coverage-summary/
        retention-days: 30

    - name: Upload coverage history for next run
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history-${{ github.ref_name }}
        path: ./coverage-report/
        retention-days: 90

    - name: End SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Run security scan
      run: dotnet list package --vulnerable

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t normaize-api .
        echo "Docker image built successfully"
        docker images | grep normaize-api

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        
        # Verify image exists and has correct structure
        echo "Checking image details..."
        docker images normaize-api
        
        # Test that the image contains the expected files
        echo "Validating image contents..."
        docker run --rm --entrypoint="" normaize-api ls -la /app/
        
        # Test that the main application DLL exists
        echo "Testing application files..."
        docker run --rm --entrypoint="" normaize-api test -f /app/Normaize.API.dll && echo "✅ Application DLL found"
        
        echo "✅ Docker image test completed"
        echo "Image builds successfully and contains all required files"

  database-migration:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_TEST_ROOT_PASSWORD }}
          MYSQL_DATABASE: normaize
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MySQL Client
      run: sudo apt-get update && sudo apt-get install -y mysql-client

    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        while ! mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} -e "SELECT 1" > /dev/null 2>&1; do
          sleep 2
        done
        echo "✅ MySQL is ready"

    - name: Install EF Core Tools
      run: dotnet tool install --global dotnet-ef

    - name: Apply EF Core Migration
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLDATABASE: normaize
        MYSQLUSER: root
        MYSQLPASSWORD: test123
        MYSQLPORT: 3306
      run: |
        dotnet ef database update --project Normaize.Data --startup-project Normaize.API

    - name: Verify Migration
      run: |
        echo "Verifying database migration..."
        
        # Check if tables exist
        mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} normaize -e "SHOW TABLES;"
        
        # Check if DataSets table exists and has expected columns
        mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} normaize -e "DESCRIBE DataSets;"
        
        echo "✅ Database migration verification completed"

  deploy-coverage-pages:
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report-${{ github.ref_name }}
        path: ./coverage-report/

    - name: Debug repository info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Repository name: ${{ github.event.repository.name }}"
        echo "GitHub server URL: ${{ github.server_url }}"
        echo "Current ref: ${{ github.ref }}"
        echo "Current SHA: ${{ github.sha }}"
        echo "Repository visibility: ${{ github.event.repository.private }}"

    - name: Check repository access
      run: |
        # Test if we can access the repository
        if git ls-remote --exit-code origin > /dev/null 2>&1; then
          echo "✅ Repository access confirmed"
          echo "REPO_ACCESS=true" >> $GITHUB_ENV
        else
          echo "❌ Repository access failed"
          echo "REPO_ACCESS=false" >> $GITHUB_ENV
        fi

    - name: Setup Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./coverage-report/

    - name: Deploy to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Skip deployment - Access issues
      if: env.REPO_ACCESS == 'false'
      run: |
        echo "⚠️ Skipping GitHub Pages deployment due to repository access issues"
        echo "This might be due to repository permissions or configuration"
        echo "Please check your GitHub Pages settings in the repository"
        echo ""
        echo "For private repositories with GitHub Pro:"
        echo "1. Ensure GitHub Pages is enabled in repository settings"
        echo "2. Check that the repository has proper permissions"
        echo "3. Verify that GitHub Pro features are enabled for this repository"

  coverage-summary:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-test-coverage

    steps:
    - name: Download coverage summary
      uses: actions/download-artifact@v4
      with:
        name: coverage-summary-${{ github.ref_name }}
        path: coverage-summary/

    - name: Display coverage summary
      run: |
        if [ -f "coverage-summary/Summary.txt" ]; then
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat coverage-summary/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage summary found"
        fi

    - name: Upload coverage badges
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: coverage-badges
        path: coverage-summary/
        retention-days: 30 