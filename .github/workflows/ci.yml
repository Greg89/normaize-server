name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile'
      - 'docker-compose.yml'

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_IMAGE_NAME: normaize-server
  DOCKER_TAG: latest

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  database-migration:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run database migrations
      run: |
        dotnet ef database update --project Normaize.Data --startup-project Normaize.API
      env:
        CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}

 