name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.cs'
      - '**.csproj'
      - '**.yml'
      - '**.yaml'
      - 'Dockerfile'
      - 'docker-compose.yml'

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_IMAGE_NAME: normaize-server
  DOCKER_TAG: latest

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release --logger "console;verbosity=detailed"

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t normaize-api . || exit 1
        echo "✅ Docker image built successfully"
        docker images | grep normaize-api

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        
        # Verify image exists and has correct structure
        echo "Checking image details..."
        docker images normaize-api || exit 1
        
        # Test that the image contains the expected files
        echo "Validating image contents..."
        docker run --rm --entrypoint="" normaize-api ls -la /app/ || exit 1
        
        # Test that the main application DLL exists
        echo "Testing application files..."
        docker run --rm --entrypoint="" normaize-api test -f /app/Normaize.API.dll && echo "✅ Application DLL found" || exit 1
        
        # Test that the health check endpoint is accessible
        echo "Testing health check endpoint..."
        docker run --rm --entrypoint="" normaize-api test -f /app/Normaize.API.dll && echo "✅ Health check endpoint available" || exit 1
        
        echo "✅ Docker image test completed"
        echo "Image builds successfully and contains all required files"

  database-migration:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 15
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_TEST_ROOT_PASSWORD }}
          MYSQL_DATABASE: normaize
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
 
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install MySQL Client
      run: sudo apt-get update && sudo apt-get install -y mysql-client

    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        timeout 60 bash -c 'until mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} -e "SELECT 1" > /dev/null 2>&1; do sleep 2; done'
        echo "✅ MySQL is ready"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --no-restore --configuration Release

    - name: Install EF Core Tools
      run: |
        dotnet tool install --global dotnet-ef || dotnet tool update --global dotnet-ef
        dotnet ef --version

    - name: Apply EF Core Migration
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLDATABASE: normaize
        MYSQLUSER: root
        MYSQLPASSWORD: ${{ secrets.MYSQL_TEST_ROOT_PASSWORD }}
        MYSQLPORT: 3306
      run: |
        dotnet ef database update --project Normaize.Data --startup-project Normaize.API --configuration Release --verbose

    - name: Verify Migration
      run: |
        echo "Verifying database migration..."
        
        # Check if tables exist
        mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} normaize -e "SHOW TABLES;"
        
        # Check if DataSets table exists and has expected columns
        mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_TEST_ROOT_PASSWORD }} normaize -e "DESCRIBE DataSets;"
        
        echo "✅ Database migration verification completed"