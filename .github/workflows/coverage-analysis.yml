name: Coverage Analysis and SonarQube

on:
  workflow_dispatch:
  schedule:
    # Run daily at 2 AM UTC to ensure regular coverage tracking
    # This will run on the default branch (main)
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '9.0.x'
  SONAR_PROJECT_KEY: 'Greg89_normaize-server'
  SONAR_ORGANIZATION: 'greg89'

jobs:
  coverage-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for coverage tracking

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    # SonarQube Setup and Analysis
    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Begin SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "Starting SonarQube analysis..."
        echo "Project Key: ${{ env.SONAR_PROJECT_KEY }}"
        echo "Organization: ${{ env.SONAR_ORGANIZATION }}"
        ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"${{ env.SONAR_PROJECT_KEY }}" \
          /o:"${{ env.SONAR_ORGANIZATION }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.exclusions="**/coverage-report/**,**/coverage-summary/**,**/coverage-opencover/**,**/coverage/**,**/test-results/**,**/bin/**,**/obj/**,**/uploads/**,**/*.Designer.cs,**/Migrations/**" \
          /d:sonar.verbose=true

    - name: Build for SonarQube Analysis
      run: |
        echo "Building solution for SonarQube analysis..."
        dotnet build --no-restore --configuration Release
        echo "Build completed. Checking for built assemblies..."
        find . -name "*.dll" -path "*/bin/Release/*" | grep -E "(Normaize\.API|Normaize\.Core|Normaize\.Data)" | head -10

    # Run tests with coverage
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Run tests with coverage
      shell: pwsh
      run: |
        echo "Running tests with coverage collection..."
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --logger trx
        echo "Coverage collection completed"

    # Coverage Report Generation
    - name: Install ReportGenerator
      run: |
        echo "Installing ReportGenerator..."
        dotnet tool install --global dotnet-reportgenerator-globaltool
        echo "ReportGenerator installed successfully"

    - name: Convert coverage to OpenCover format for SonarQube
      env:
        REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
      run: |
        echo "Converting coverage reports to OpenCover format..."
        echo "Coverage reports path: ./coverage/**/coverage.cobertura.xml"
        
        # Check if coverage reports exist
        if ! ls ./coverage/**/coverage.cobertura.xml 1> /dev/null 2>&1; then
          echo "⚠️ No coverage reports found at: ./coverage/**/coverage.cobertura.xml"
          echo "Creating empty coverage report for SonarQube..."
          mkdir -p ./coverage-opencover
          echo '<?xml version="1.0" encoding="utf-8"?><CoverageSession xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Modules /></CoverageSession>' > ./coverage-opencover/OpenCover.xml
        else
          echo "Found coverage reports, converting to OpenCover format..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-opencover" -reporttypes:OpenCover
        fi
        
        # Copy OpenCover file to expected location for SonarQube
        mkdir -p ./coverage
        cp ./coverage-opencover/OpenCover.xml ./coverage/coverage.opencover.xml
        echo "✅ OpenCover format conversion completed"

    # Coverage History Management
    - name: Initialize coverage history directory
      run: |
        echo "Initializing coverage history directory..."
        mkdir -p ./coverage-history
        echo "✅ Coverage history directory initialized"

    - name: Download previous coverage history
      uses: actions/download-artifact@v4
      with:
        name: coverage-history
        path: ./coverage-history/
      continue-on-error: true

    - name: Debug coverage history download
      run: |
        echo "=== Coverage History Debug Information ==="
        echo "Current directory: $(pwd)"
        echo "Coverage history directory contents:"
        if [ -d ./coverage-history ]; then
          ls -la ./coverage-history/
          echo "Directory exists and contains $(ls -1 ./coverage-history/ | wc -l) files"
        else
          echo "Coverage history directory does not exist"
        fi
        echo "=== End Coverage History Debug ==="

    - name: Generate coverage report with history
      env:
        REPORTGENERATOR_LICENSE: ${{ secrets.REPORTGENERATOR_LICENSE }}
      run: |
        echo "Generating coverage reports..."
        echo "Coverage reports path: ./coverage/**/coverage.cobertura.xml"
        
        # Check if coverage reports exist
        if ! ls ./coverage/**/coverage.cobertura.xml 1> /dev/null 2>&1; then
          echo "⚠️ No coverage reports found, creating empty report..."
          mkdir -p ./coverage-report
          mkdir -p ./coverage-summary
          echo "No coverage data available" > ./coverage-summary/Summary.txt
          echo "No coverage data available" > ./coverage-report/index.html
        else
          # Generate HTML report with history if available
          if [ -d "./coverage-history" ] && [ "$(ls -A ./coverage-history)" ]; then
            echo "Generating report with history..."
            reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html -historydir:"./coverage-history"
          else
            echo "Generating report without history..."
            reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:Html
          fi
          
          # Always generate summary and badges
          echo "Generating summary and badges..."
          reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-summary" -reporttypes:"TextSummary;Badges"
        fi
        
        echo "✅ Coverage report generation completed"

    - name: Debug coverage artifacts
      run: |
        echo "=== Coverage Artifacts Debug Information ==="
        echo "Coverage report directory:"
        if [ -d ./coverage-report ]; then ls -la ./coverage-report/; else echo "No coverage-report directory found"; fi
        echo ""
        echo "Coverage summary directory:"
        if [ -d ./coverage-summary ]; then ls -la ./coverage-summary/; else echo "No coverage-summary directory found"; fi
        echo ""
        echo "Coverage history directory:"
        if [ -d ./coverage-history ]; then ls -la ./coverage-history/; else echo "No coverage-history directory found"; fi
        echo "=== End Debug Information ==="

    # Upload Coverage Artifacts
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.ref_name }}
        path: ./coverage-report/
        retention-days: 30

    - name: Upload coverage summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary-${{ github.ref_name }}
        path: ./coverage-summary/
        retention-days: 30

    - name: Upload coverage history for next run
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history
        path: ./coverage-history/
        retention-days: 90

    # End SonarQube Analysis
    - name: End SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "Ending SonarQube analysis..."
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        echo "✅ SonarQube analysis completed"

    # Upload to Codecov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # GitHub Pages Deployment
  deploy-coverage-pages:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: coverage-analysis
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report-${{ github.ref_name }}
        path: ./coverage-report/

    - name: Check repository access
      run: |
        if git ls-remote --exit-code origin > /dev/null 2>&1; then 
          echo "✅ Repository access confirmed"; 
          echo "REPO_ACCESS=true" >> $GITHUB_ENV; 
        else 
          echo "❌ Repository access failed"; 
          echo "REPO_ACCESS=false" >> $GITHUB_ENV; 
        fi

    - name: Setup Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./coverage-report/

    - name: Deploy to GitHub Pages
      if: env.REPO_ACCESS == 'true'
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Skip deployment - Access issues
      if: env.REPO_ACCESS == 'false'
      run: |
        echo "⚠️ Skipping GitHub Pages deployment due to repository access issues"
        echo "This might be due to repository permissions or configuration"
        echo "Please check your GitHub Pages settings in the repository"

  # Coverage Summary Display
  coverage-summary:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: coverage-analysis
    steps:
    - name: Download coverage summary
      uses: actions/download-artifact@v4
      with:
        name: coverage-summary-${{ github.ref_name }}
        path: coverage-summary/

    - name: Display coverage summary
      run: |
        if [ -f "coverage-summary/Summary.txt" ]; then 
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY; 
          echo "```" >> $GITHUB_STEP_SUMMARY; 
          cat coverage-summary/Summary.txt >> $GITHUB_STEP_SUMMARY; 
          echo "```" >> $GITHUB_STEP_SUMMARY; 
        else 
          echo "No coverage summary found"; 
        fi

    - name: Upload coverage badges
      uses: actions/upload-artifact@v4
      with:
        name: coverage-badges
        path: coverage-summary/
        retention-days: 30 