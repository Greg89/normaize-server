// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Normaize.Data;

#nullable disable

namespace Normaize.Data.Migrations
{
    [DbContext(typeof(NormaizeContext))]
    [Migration("20250706230302_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Normaize.Core.Models.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComparisonDataSetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Configuration")
                        .HasColumnType("JSON");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DataSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Results")
                        .HasColumnType("JSON");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonDataSetId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DataSetId");

                    b.HasIndex("Status");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Normaize.Core.Models.DataSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnCount")
                        .HasColumnType("int");

                    b.Property<string>("DataHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PreviewData")
                        .HasColumnType("JSON");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessedData")
                        .HasColumnType("JSON");

                    b.Property<string>("ProcessingErrors")
                        .HasColumnType("TEXT");

                    b.Property<int>("RowCount")
                        .HasColumnType("int");

                    b.Property<string>("Schema")
                        .HasColumnType("JSON");

                    b.Property<string>("StorageProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Local");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UseSeparateTable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UseSeparateTable");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("Normaize.Core.Models.DataSetRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("DataSetId")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId", "RowIndex")
                        .HasDatabaseName("idx_datasetrow_dataset_row");

                    b.ToTable("DataSetRows");
                });

            modelBuilder.Entity("Normaize.Core.Models.Analysis", b =>
                {
                    b.HasOne("Normaize.Core.Models.DataSet", "ComparisonDataSet")
                        .WithMany()
                        .HasForeignKey("ComparisonDataSetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Normaize.Core.Models.DataSet", "DataSet")
                        .WithMany("Analyses")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComparisonDataSet");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("Normaize.Core.Models.DataSetRow", b =>
                {
                    b.HasOne("Normaize.Core.Models.DataSet", "DataSet")
                        .WithMany("Rows")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("Normaize.Core.Models.DataSet", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("Rows");
                });
#pragma warning restore 612, 618
        }
    }
}
